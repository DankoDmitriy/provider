package com.danko.provider.domain.dao;

import com.danko.provider.domain.entity.User;
import com.danko.provider.domain.entity.UserRole;
import com.danko.provider.domain.entity.UserStatus;
import com.danko.provider.exception.DaoException;

import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;

/**
 * Dao for users table
 */
public interface UserDao extends BaseDao<Long, User> {
    /**
     * Add entity.
     *
     * @param user           the user entity
     * @param password       the password
     * @param activationCode the activation code
     * @return generated by DBMS entity id or -1 if entity has no autogenerated id
     * @throws DaoException the dao exception
     */
    long add(User user, String password, String activationCode) throws DaoException;

    /**
     * Find by name and password optional.
     *
     * @param name     the name
     * @param password the password
     * @return the optional
     * @throws DaoException the dao exception
     */
    Optional<User> findByNameAndPassword(String name, String password) throws DaoException;

    /**
     * Update password boolean.
     *
     * @param userId          the user id
     * @param password        the password
     * @param newActivateCode the new activate code
     * @param userStatus      the user status
     * @return true when update process finish correct
     * @throws DaoException the dao exception
     */
    boolean updatePassword(long userId, String password, String newActivateCode, UserStatus userStatus) throws DaoException;

    /**
     * Update activation code status.
     *
     * @param activateCode the activate code
     * @param userStatus   the user status
     * @return true when update process finish correct
     * @throws DaoException the dao exception
     */
    boolean updateActivationCodeStatus(String activateCode, UserStatus userStatus) throws DaoException;

    /**
     * Verification of activation code.
     *
     * @param activateCode the activate code
     * @return the boolean
     * @throws DaoException the dao exception
     */
    boolean verificationOfActivationCode(String activateCode) throws DaoException;

    /**
     * Update tariff and traffic and balance value boolean.
     *
     * @param userId   the user id
     * @param tariffId the tariff id
     * @param traffic  the traffic
     * @param balance  the balance
     * @return true when update process finish correct
     * @throws DaoException the dao exception
     */
    boolean updateTariffAndTrafficAndBalanceValue(long userId, long tariffId, BigDecimal traffic, BigDecimal balance) throws DaoException;

    /**
     * Balance replenishment boolean.
     *
     * @param userId      the user id
     * @param userBalance the user balance
     * @return true when update process finish correct
     * @throws DaoException the dao exception
     */
    boolean balanceReplenishment(long userId, BigDecimal userBalance) throws DaoException;

    /**
     * Update contract number and user name boolean.
     *
     * @param userId         the user id
     * @param contractNumber the contract number
     * @param userName       the user name
     * @return true when update process finish correct
     * @throws DaoException the dao exception
     */
    boolean updateContractNumberAndUserName(long userId, String contractNumber, String userName) throws DaoException;

    /**
     * Update first name boolean.
     *
     * @param userId    the user id
     * @param firstName the first name
     * @return true when update process finish correct
     * @throws DaoException the dao exception
     */
    boolean updateFirstName(long userId, String firstName) throws DaoException;

    /**
     * Update last name boolean.
     *
     * @param userId   the user id
     * @param lastName the last name
     * @return true when update process finish correct
     * @throws DaoException the dao exception
     */
    boolean updateLastName(long userId, String lastName) throws DaoException;

    /**
     * Update patronymic boolean.
     *
     * @param userId     the user id
     * @param patronymic the patronymic
     * @return true when update process finish correct
     * @throws DaoException the dao exception
     */
    boolean updatePatronymic(long userId, String patronymic) throws DaoException;

    /**
     * Update email boolean.
     *
     * @param userId the user id
     * @param email  the email
     * @return true when update process finish correct
     * @throws DaoException the dao exception
     */
    boolean updateEmail(long userId, String email) throws DaoException;

    /**
     * Update status boolean.
     *
     * @param userId the user id
     * @param status the status
     * @return true when update process finish correct
     * @throws DaoException the dao exception
     */
    boolean updateStatus(long userId, UserStatus status) throws DaoException;

    /**
     * Update role boolean.
     *
     * @param userId the user id
     * @param role   the role
     * @return true when update process finish correct
     * @throws DaoException the dao exception
     */
    boolean updateRole(long userId, UserRole role) throws DaoException;

    /**
     * Rows in table by user role long.
     *
     * @param role the role
     * @return the long
     * @throws DaoException the dao exception
     */
    long rowsInTableByUserRole(UserRole role) throws DaoException;

    /**
     * Find all by user role page limit list.
     *
     * @param role          the role
     * @param startPosition the start position
     * @param rows          the rows
     * @return list of found entities or empty list.
     * @throws DaoException the dao exception
     */
    List<User> findAllByUserRolePageLimit(UserRole role, long startPosition, long rows) throws DaoException;

    /**
     * Search users by parameters list.
     *
     * @param searchParameter the search parameter
     * @return list of found entities or empty list.
     * @throws DaoException the dao exception
     */
    List<User> searchUsersByParameters(String searchParameter) throws DaoException;
}
